{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["export { config, getInitialCards, getUserData }\n\n// Основные настройки запроса к серверу\nconst config = {\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-35',\n    headers: {\n        authorization: '7263799d-0cc7-4c40-bf32-62633bf1c840',\n        'Content-Type': 'application/json'\n    }\n}\n\n// Загрузка информации о пользователе с сервера\nconst getUserData = () => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        headers: config.headers\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json()\n        } else {\n            return Promise.reject(`Упс, ошибочка вышла: ${res.status}`)\n        }\n    })\n    .then((userData) => {\n        return userData\n    })\n    .catch((err) => {\n        console.error(`Упс, ошибочка вышла: ${err}`)\n    })\n}\n\n// Загрузка карточек с сервера\nconst getInitialCards = () => {\n    return fetch(`${config.baseUrl}/cards`, {\n        headers: config.headers\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json()\n        } else {\n            return Promise.reject(`Упс, ошибочка вышла: ${res.status}`)\n        }\n    })\n    .then((cardsData) => {\n        return cardsData\n    })\n    .catch((err) => {\n        console.error(`Упс, ошибочка вышла: ${err}`)\n    })\n}","export { createCard, deleteCard, switchTheLikeBtn }\n\n// Функция создания карточки\nfunction createCard(cardData, deleteCard, switchTheLikeBtn, openImgModal, currentUserId, cardAuthorId) {\n    const cardTemplate = document.querySelector('#card-template').content\n    const card = cardTemplate.querySelector('.card').cloneNode(true)\n    const cardImage = card.querySelector('.card__image')\n    const cardTitle = card.querySelector('.card__title')\n\n    const cardDeleteButton = card.querySelector('.card__delete-button')\n    const cardLikeButton = card.querySelector('.card__like-button')\n\n    const cardImageName = cardData.name\n    const cardImageLink = cardData.link\n\n    cardImage.src = cardImageLink\n    cardImage.alt = cardImageName\n    cardTitle.textContent = cardImageName\n\n    cardDeleteButton.addEventListener('click', deleteCard)\n    cardLikeButton.addEventListener('click', switchTheLikeBtn)\n    cardImage.addEventListener('click', () => openImgModal(cardImageName, cardImageLink))\n\n    if (currentUserId !== cardAuthorId) {\n        cardDeleteButton.style.display = 'none'\n    }\n\n    return card\n}\n\n// Функции-обработчик события удаления карточки\nconst deleteCard = evt => {\n    if (evt.target === evt.currentTarget) {\n        evt.currentTarget.closest('.card').remove()\n    }\n}\n\n// Функции-обработчик события переключения лайка карточки\nconst switchTheLikeBtn = evt => {\n    if (evt.target === evt.currentTarget) {\n        evt.currentTarget.classList.toggle('card__like-button_is-active')\n    }\n}","export { openModal, closeModal }\n\n// Функция открытия модального окна\nconst openModal = modal => {\n    modal.classList.add('popup_is-opened')\n    modal.addEventListener('click', closeModalByOverlayClick)\n    document.addEventListener('keydown', closeModalByKey)\n}\n\n// Функция закрытия модального окна\nconst closeModal = modal => {\n    modal.classList.remove('popup_is-opened')\n    modal.removeEventListener('click', closeModalByOverlayClick)\n    document.removeEventListener('keydown', closeModalByKey)\n}\n\n// Функция-обработчик события клика по оверлею\nfunction closeModalByOverlayClick(evt) {\n    if (evt.target === evt.currentTarget) {\n        closeModal(evt.currentTarget)\n    }\n}\n\n// Функция-обработчик события нажатия кнопки \"Esc\"\nfunction closeModalByKey(evt) {\n    if (evt.key === 'Escape') {\n        const modal = document.querySelector('.popup_is-opened')\n        modal ? closeModal(modal) : false\n    }\n}\n","export { enableValidation, clearValidation }\n\n// Валидация всех форм\nfunction enableValidation(config) {\n    const forms = document.querySelectorAll(config.formSelector)\n\n    forms.forEach((form) => {\n        const inputs = form.querySelectorAll(config.inputSelector)\n        const submitButton = form.querySelector(config.submitButtonSelector)\n\n        inputs.forEach((input) => {\n        input.addEventListener('input', () => {\n            isInputValid(form, input, config.inputErrorClass, config.errorClass)\n            toggleSubmitButton(inputs, submitButton, config.inactiveButtonClass)\n        })\n        })\n\n        toggleSubmitButton(inputs, submitButton, config.inactiveButtonClass)\n    })\n}\n\n// Проверка валидности полей формы\nfunction isInputValid(form, input, inputErrorClass, errorClass) {\n    const errorItem = form.querySelector(`.${input.id}-error`)\n    const customErrorMessage = input.dataset.errorMessage\n\n    if (input.validity.patternMismatch) {\n        input.setCustomValidity(customErrorMessage)\n    } else {\n        input.setCustomValidity('')\n    }\n\n    if (!input.validity.valid) {\n        input.classList.add(inputErrorClass)\n        errorItem.classList.add(errorClass)\n        errorItem.textContent = input.validationMessage\n    } else {\n        input.classList.remove(inputErrorClass)\n        errorItem.classList.remove(errorClass)\n        errorItem.textContent = ''\n  }\n}\n\n// Переключение состояния кнопки при валидации\nfunction toggleSubmitButton(inputs, submitButton, inactiveButtonClass) {\n    const hasInvalidInput = Array.from(inputs).some((input) => !input.validity.valid)\n\n    if (hasInvalidInput) {\n        submitButton.classList.add(inactiveButtonClass)\n        submitButton.disabled = true\n    } else {\n        submitButton.classList.remove(inactiveButtonClass)\n        submitButton.disabled = false\n    }\n}\n\n// Очистка сообщений об ошибках\nfunction clearValidation(form, config) {\n    const inputs = form.querySelectorAll(config.inputSelector)\n    const submitButton = form.querySelector(config.submitButtonSelector)\n\n    inputs.forEach((input) => {\n        const errorItem = form.querySelector(`.${input.id}-error`)\n\n        input.setCustomValidity('')\n        input.classList.remove(config.inputErrorClass)\n\n        if (errorItem) {\n            errorItem.textContent = ''\n            errorItem.classList.remove(config.errorClass)\n        }\n    })\n\n    submitButton.classList.add(config.inactiveButtonClass);\n    submitButton.disabled = true;\n} ","import '../pages/index.css'\nimport { config, getInitialCards, getUserData } from './api.js'\nimport { createCard, deleteCard, switchTheLikeBtn } from './card.js'\nimport { openModal, closeModal } from './modal.js'\nimport { enableValidation, clearValidation } from './validation.js'\n\n\n// Контейнер карточек на странице\nconst placesList = document.querySelector('.places__list')\n\n// Профиль\nconst profile = document.querySelector('.profile')\nconst profileName = profile.querySelector('.profile__title')\nconst profileJob = profile.querySelector('.profile__description')\n\n// Кнопки профиля\nconst profileEditBtn = profile.querySelector('.profile__edit-button')\nconst profileAddBtn = profile.querySelector('.profile__add-button')\n\n\n//-------------- МОДАЛЬНЫЕ ОКНА --------------\n// Модальне окна профиля\nconst profileEditModal = document.querySelector('.popup_type_edit')\nconst addNewCardModal = document.querySelector('.popup_type_new-card')\n\n// Модальное окно изображения карточки\nconst cardImagePopup = document.querySelector('.popup_type_image')\nconst popupImage = cardImagePopup.querySelector('.popup__image')\nconst popupCaption = cardImagePopup.querySelector('.popup__caption')\n\n// Все модальные окна\nconst modals = document.querySelectorAll('.popup')\n\n// Все кнопки закрытия модальных окон\nconst closeModalButtons = document.querySelectorAll('.popup__close')\n\n\n//------------------- ФОРМЫ -------------------\n// Форма редактирования профиля\nconst profileEditForm = document.forms['edit-profile']\nconst profileNameInput = profileEditForm.querySelector('.popup__input_type_name')\nconst profileJobInput = profileEditForm.querySelector('.popup__input_type_description')\n\n// Форма создания новой карточки\nconst addNewCardForm = document.forms['new-place']\nconst newCardNameInput = addNewCardForm.querySelector('.popup__input_type_card-name')\nconst newCardLinkInput = addNewCardForm.querySelector('.popup__input_type_url')\n\n// Объект настроек валидации\nconst validationConfig = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible'\n}\n\n\n//------------------- ФУНКЦИИ -------------------\n// Получить актуальные данные профиля с сервера\nfunction updateProfile() {\n    fetch(`${config.baseUrl}/users/me`, {\n        headers: config.headers,\n    })\n    .then((res) => {\n      if (res.ok) {\n            return res.json()\n        } else {\n            return Promise.reject(`Упс, ошибочка вышла: ${res.status}`)\n        }\n    })\n    .then((data) => {\n      profileName.textContent = data.name\n      profileJob.textContent = data.about\n    })\n    .catch(err => console.error(`Упс, ошибочка вышла: ${err}`))\n}\n\n// Отрисовка карточек с сервера\nfunction renderCards(getCards, getUserInfo, cardContainer, createCard) {\n    Promise.all([getCards(), getUserInfo()])\n        .then(([cards, userInfo]) => {\n            cards.forEach(cardData => {\n                const currentUserId = userInfo._id\n                const cardAuthorId = cardData.owner._id\n                cardContainer.append(createCard(cardData, \n                                                deleteCard, \n                                                switchTheLikeBtn, \n                                                openImgModal, \n                                                currentUserId, \n                                                cardAuthorId))\n            })\n        })\n        .catch(err => console.error(`Упс, ошибочка вышла: ${err}`))\n}\n\n// Отправка формы редактирования профиля\nfunction handleProfileFormSubmit(evt) {\n    evt.preventDefault()\n    fetch(`${config.baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: config.headers,\n        body: JSON.stringify({\n            name: profileNameInput.value,\n            about: profileJobInput.value,\n        }),\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json()\n        } else {\n            return Promise.reject(`Упс, ошибочка вышла: ${res.status}`)\n        }\n    })\n    .then(currentUserData => {\n        profileName.textContent = currentUserData.name\n        profileJob.textContent = currentUserData.about\n        closeModal(profileEditModal)\n    })\n    .catch(err => console.error(`Упс, ошибочка вышла: ${err}`))\n}\n\n// Отправка формы создания новой карточки\nfunction handleNewCardFormSubmit(evt) {\n    evt.preventDefault()\n    const newCard = {\n        name: newCardNameInput.value,\n        link: newCardLinkInput.value,\n    }\n    fetch(`${config.baseUrl}/cards`, {\n        method: 'POST',\n        headers: config.headers,\n        body: JSON.stringify(newCard)\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json()\n        } else {\n            return Promise.reject(`Упс, ошибочка вышла: ${res.status}`)\n        }\n    })\n    .then(newCardData => {\n        placesList.prepend(createCard(newCardData, deleteCard, switchTheLikeBtn, openImgModal))\n        addNewCardForm.reset()\n        closeModal(addNewCardModal)\n    })\n    .catch(err => console.error(`Упс, ошибочка вышла: ${err}`))\n}\n\n// Функция открытия модального окна изображения карточки\nfunction openImgModal(name, link) {\n    openModal(cardImagePopup)\n    popupImage.alt = name\n    popupCaption.textContent = name\n    popupImage.src = link\n}\n\n\n//------------------- КНОПКИ -------------------\n// Кнопка \"Редактировать профиль\"\nprofileEditBtn.addEventListener('click', () => {\n    profileNameInput.value = profileName.textContent\n    profileJobInput.value = profileJob.textContent\n    openModal(profileEditModal)\n    clearValidation(profileEditForm, validationConfig)\n})\n\n// Кнопка \"+\" добавить новую карточку\nprofileAddBtn.addEventListener('click', () => {\n    newCardNameInput.value = ''\n    newCardLinkInput.value = ''\n    openModal(addNewCardModal)\n    clearValidation(addNewCardForm, validationConfig)\n})\n\n// Кнопка \"Сохранить\" формы редактирования профиля\nprofileEditForm.addEventListener('submit', handleProfileFormSubmit)\n\n// Кнопка \"Сохранить\" формы создания новой карточки\naddNewCardForm.addEventListener('submit', handleNewCardFormSubmit)\n\n// Все кнопки закрытия модальных окон\ncloseModalButtons.forEach((btn) => {\n    const modal = btn.closest('.popup')\n    btn.addEventListener('click', () => closeModal(modal))\n})\n\n//-----------------------------------------------\n\n// Плавное открытие/закрытие всех модальных окон\nmodals.forEach((modal) => modal.classList.add('popup_is-animated'))\n\n// Вызовы функций\nupdateProfile()\nrenderCards(getInitialCards, getUserData, placesList, createCard)\nenableValidation(validationConfig)\n"],"names":["config","baseUrl","headers","authorization","createCard","cardData","deleteCard","switchTheLikeBtn","openImgModal","currentUserId","cardAuthorId","card","document","querySelector","content","cloneNode","cardImage","cardTitle","cardDeleteButton","cardLikeButton","cardImageName","name","cardImageLink","link","src","alt","textContent","addEventListener","style","display","evt","target","currentTarget","closest","remove","classList","toggle","openModal","modal","add","closeModalByOverlayClick","closeModalByKey","closeModal","removeEventListener","key","toggleSubmitButton","inputs","submitButton","inactiveButtonClass","Array","from","some","input","validity","valid","disabled","clearValidation","form","querySelectorAll","inputSelector","submitButtonSelector","forEach","errorItem","concat","id","setCustomValidity","inputErrorClass","errorClass","placesList","profile","profileName","profileJob","profileEditBtn","profileAddBtn","profileEditModal","addNewCardModal","cardImagePopup","popupImage","popupCaption","modals","closeModalButtons","profileEditForm","forms","profileNameInput","profileJobInput","addNewCardForm","newCardNameInput","newCardLinkInput","validationConfig","formSelector","value","preventDefault","fetch","method","body","JSON","stringify","about","then","res","ok","json","Promise","reject","status","currentUserData","catch","err","console","error","newCard","newCardData","prepend","reset","btn","data","getCards","getUserInfo","cardContainer","all","cardsData","userData","_ref","_ref2","cards","userInfo","_id","owner","append","renderCards","customErrorMessage","dataset","errorMessage","patternMismatch","validationMessage","isInputValid","enableValidation"],"sourceRoot":""}